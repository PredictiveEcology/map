% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map.R
\name{identifyVectorArgs}
\alias{identifyVectorArgs}
\title{Identify the source for arguments passed to an arbitrary function}
\usage{
identifyVectorArgs(fn, localFormalArgs, envir, dots)
}
\arguments{
\item{fn}{A function or list of functions from which to run \code{formalArgs}}

\item{localFormalArgs}{A vector of possible objects, e.g., from \code{ls()}}

\item{envir}{The environment to find the objects named in \code{localFormalArgs}}

\item{dots}{Generally list(...), which would be an alternative place to find
\code{localFormalArgs}}
}
\value{
A list of length 2, named \code{argsSingle} and \code{argsMulti}, which
        can be passed to e.g.,
        \code{MapOrDoCall(fn, multiple = args1$argsMulti, single = args1$argsSingle)}
}
\description{
When running arbitrary functions inside other functions, there is a common
construct in R to use \code{...}. It does not work, however, in the general case
to write \code{do.call(fn, list(...))} because not all \code{fn} themselves
accept \code{...}. So this will fail if too many arguments are supplied to
the \code{...}. In the general case, we want to write:
\code{do.call(fn, list(onlyTheArgumentsThatAreNeeded))}. This function helps
to find the \code{onlyTheArgumentsThatAreNeeded} by determining a) what is needed
by the \code{fn} (which can be a list of many \code{fn}), and b) where to find
values, either in an arbitrary environment or passed in via \code{dots}.
}
